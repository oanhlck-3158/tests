quit
request.headers["Authorization"]
request
quit
request.headers.authorization
quit
response.headers["Authorization"]
response.headers
response
request.headers["Authorization"]
request
quit
response
request.headers["Authorization"]
quit
response
request.headers["Authorization"]
request.headers
quit
request.headers["Authorization"]
quit
request.headers["Authorization"]
quit
request.headers["Authorization"]
quit
request.headers["Authorization"]
request.headers
request
quit
request.headers
request
params
quit
request
quit
response.status
request
quit
request.headers
request
quit
request.headers
request
request\
response
quit
response
request
quit
token
next
token
next
token
next
token
quit
@token
next
nexdt
@token
token
next
@token
quit
token
@token
quit
require
response
request
quit
decoded[:id]
quit
decoded[:id]
decoded
token
quit
JWT.decode(request.headers['Authorization'].split(' ')[1], ENV["JWT_SECRET_KEY"])
JWT.decode(request.headers['Authorization'].split(' ')[1], ENV["JWT_SECRET_KEY"]).first
quit
y
quit
JWT.decode(request.headers['Authorization'].split(' ')[1], ENV["JWT_SECRET_KEY"])
JWT.decode(request.headers['Authorization'].split(' ')[1], ENV["JWT_SECRET_KEY"]).first
quit
next
JWT.decode(request.headers['Authorization'].split(' ')[1], ENV["JWT_SECRET_KEY"]).first
quit
access_token
quit
2.hours.from_now.to_i
60.days.from_now.to_i
continue
Settings.digits.token_expiration_time.from_now.to_i
quit
id
quit
user.valid_password?(sign_in_params[:password])
quit
user.valid_password?(sign_in_params[:email])
quit
User.find_by email: sign_up_params[:email]
sign_up_params[:email]
quit
response
quit
response
{response}.to change(Product, :count).by +1
response.to change(Product, :count).by +1
response
quit
response
quit
JSON.parse response.body == product
JSON.parse response.body
response.body
response
continue
quit
product_params
quit
quiy
query
quit
query
quit
request
quit
quit\
params
quit
params
@products
product_params
@product
product
quit
JSON.parse(response.body)
response.body
product
